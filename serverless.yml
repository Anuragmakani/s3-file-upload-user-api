service: s3-file-uploader

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ap-south-1

custom:
  fileUploadBucketName: ${self:service}-bucket-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  s3FileUploader:
    handler: src/upload.handler
    name: s3-file-uploader
    description: A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    timeout: 60 # seconds
    memorySize: 128 # mb
    events:
      - http:
          path: images
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource: arn:aws:s3:::${self:custom.fileUploadBucketName}/*
    environment:
      FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}

resources:
  Resources:
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucketName}
        AccessControl: PublicRead

# service: s3-file-uploader
# provider:
#   name: aws
#   runtime: nodejs18.x
#   stage: dev
#   region: ap-south-1
#   imRoleStatements:
# custom:
#   fileUploadBucketName: ${self:custom.fileUploadBucketName}

# plugins:
#   - serverless-iam-roles-per-function

# functions:
#   s3FileUploader:
#     handler : src/upload.handler
#     name : s3-file-uploader
#     description : A lambda handler that upload a file to an s3 bucket 
#     timeout: 60 #seconds
#     memorySize: 128 #mb
#     events:
#       -http:
#         path: images
#         method : POST
#     iamRoleStatements:
#       - Effect : Allow 
#         Action : 
#           -"s3:Put*"
#         Resources: arn:aws:s3::: ${self:custom.fileUploadBucketName}/*
#       environment: 
#         FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}
# resources:
#   Resources:
#     fileBucket:
#       Type : AWS::s3::Bucket
#       Properties:
#         BucketName: ${self:custom.fileUploadBucketName}/*
#         AccessControl : PublicRead